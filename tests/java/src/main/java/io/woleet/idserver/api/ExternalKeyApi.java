/*
 * Woleet.ID Server
 * This is Woleet.ID Server API documentation.
 *
 * OpenAPI spec version: 1.0.4
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.woleet.idserver.api;

import io.woleet.idserver.ApiCallback;
import io.woleet.idserver.ApiClient;
import io.woleet.idserver.ApiException;
import io.woleet.idserver.ApiResponse;
import io.woleet.idserver.Configuration;
import io.woleet.idserver.Pair;
import io.woleet.idserver.ProgressRequestBody;
import io.woleet.idserver.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.woleet.idserver.api.model.APIError;
import io.woleet.idserver.api.model.KeyBase;
import io.woleet.idserver.api.model.KeyGet;
import io.woleet.idserver.api.model.KeyPost;
import io.woleet.idserver.api.model.KeyPut;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExternalKeyApi {
    private ApiClient apiClient;

    public ExternalKeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExternalKeyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createUserKey]
     *
     * @param userId Identifier of the user. (required)
     * @param keyPost Key object to add. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createExternalKeyCall(UUID userId, KeyPost keyPost, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = keyPost;

        // create path and map variables
        String localVarPath = "/external-key/create/{userId}"
                .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createExternalKeyValidateBeforeCall(UUID userId, KeyPost keyPost, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'keyPost' is set
        if (keyPost == null) {
            throw new ApiException("Missing the required parameter 'keyPost' when calling createKey(Async)");
        }

        com.squareup.okhttp.Call call = createExternalKeyCall(userId, keyPost, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new key for a user.
     *
     * @param userId Identifier of the user. (required)
     * @param keyPost Key object to add. (required)
     * @return KeyGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyGet createExternalKey(UUID userId, KeyPost keyPost) throws ApiException {
        ApiResponse<KeyGet> resp = createExternalKeyWithHttpInfo(userId, keyPost);
        return resp.getData();
    }

    /**
     * Create a new key for a user.
     *
     * @param userId Identifier of the user. (required)
     * @param keyPost Key object to add. (required)
     * @return ApiResponse&lt;KeyGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyGet> createExternalKeyWithHttpInfo(UUID userId, KeyPost keyPost) throws ApiException {
        com.squareup.okhttp.Call call = createExternalKeyValidateBeforeCall(userId, keyPost, null, null);
        Type localVarReturnType = new TypeToken<KeyGet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new key for a user. (asynchronously)
     *
     * @param userId Identifier of the user. (required)
     * @param keyPost Key object to add. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createExternalKeyAsync(UUID userId, KeyPost keyPost, final ApiCallback<KeyGet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createExternalKeyValidateBeforeCall(userId, keyPost, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyGet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
